# Algoritmo de Euclides en Z (maximo comun divisor)
mcdZ := proc (x::integer, y::integer)
 local dividendo, divisor, resto;
 dividendo := 0; divisor := x; resto := y;
 while resto <> 0 do
	dividendo := divisor;
	divisor := resto;
	resto := irem(dividendo, divisor);
 end do;
 divisor;
 end proc;
 
 
# Algoritmo de Euclides en Q (maximo comun divisor)
mcdQx := proc (f::polynom, g::polynom)
 local dividendo, divisor, resto, resultado;
 dividendo := 0; divisor := f; resto := g;
 while resto <> 0 do
	dividendo := divisor;
	divisor := resto;
	resto := rem(dividendo, divisor, x);
 end do;
 resultado := quo(divisor, lcoeff(divisor, x), x);
 resultado;
 end proc;
 

# Algoritmo de Euclides en Z[x] (maximo comun divisor)
mcdZx := proc (f::polynom, g::polynom)
 local divisorEntero, divisorQx, resultado;
 divisorEntero := mcdZ(content(f), content(g));
 divisorQx := primpart(mcdQx(f, g));
 resultado := divisorEntero*divisorQx;
 resultado;
 end proc;
 
 
# Algoritmo de Euclides en Fp[x], p primo (maximo comun divisor)
mcdFpx := proc (f::polynom, g::polynom, p::integer)
 local dividendo, divisor, resto, resultado;
 dividendo := 0; divisor := `mod`(f, p); resto := `mod`(g, p);
 while resto <> 0 do
	dividendo := divisor;
	divisor := resto;
	resto := `mod`(Rem(dividendo, divisor, x), p);
 end do;
 divisor := `mod`(divisor/lcoeff(divisor, x), p);
 end proc;
 
 
# Algoritmo de Euclides en Fq[x], q=p^n, p primo (maximo comun divisor)
mcdFqx := proc (f::polynom, g::polynom, p::integer, base::polynom)
 local dividendo, divisor, resto, resultado, aux;
 dividendo := 0; divisor := `mod`(f, p); resto := `mod`(g, p);
 while resto <> 0 do
	dividendo := divisor;
	divisor := resto;
	aux := `mod`(Rem(dividendo, divisor, x), p);
	resto := `mod`(Rem(aux, base, x), p);
 end do;
 divisor := `mod`(divisor/lcoeff(divisor, x), p);
 end proc;